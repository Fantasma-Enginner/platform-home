/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.tsir.toll.platform.resources.infrastructure.api;

import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.tsir.common.api.ApiMessage;
import org.tsir.common.services.resources.dto.ResourceDTO;
import org.tsir.toll.platform.resources.domain.dto.MappingDTO;
import org.tsir.toll.platform.resources.domain.dto.RouterDTO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-08-17T00:37:58.511Z[GMT]")
@Validated
public interface ResourcesApi {

	Logger log = LoggerFactory.getLogger(ResourcesApi.class);

	@Operation(summary = "Eliminar registro de recurso", description = "Solicitud para eliminar el registro de un recurso existente en el sistema. Se revocan automaticamente en cascada los permisos asignados al recurso.", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Recursos" })
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Recurso eliminado correctamente"),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/resources/{id}", produces = { "application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteResource(
			@Parameter(in = ParameterIn.PATH, description = "Identificador de recurso a consultar.", required = true, schema = @Schema()) @PathVariable("id") Long id);

	@Operation(summary = "Consultar recursos", description = "Obtener la lista de recursos de acuerdo a los filtros establecidos.", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Recursos" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ResourceDTO.class)))),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/resources", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<ResourceDTO>> findResources(
			@Parameter(in = ParameterIn.QUERY, description = "Llaves y valores de los criterios de búsqueda.  Enumeración de las posibles llaves:  * `ID` - Identificador del Recurso. Posibilidad de lista de valores.  * `CODE` - Codigo del Recurso. Coincidencia exacta. Posibilidad de lista de valores.  * `NAME` - Nombre del Recurso. Coincidencia parcial sin condicion de mayusculas.  * `STATE` - Estado del Recurso. Valores de la enumeración StateActive.  * `PARENT` - Codigo del Recurso padre. Coincidencia exacta.  * `TYPE` - Tipo de recurso. Valores de la Enumeración ResourceType.  * `LOCATION` - Localización del recurso. Coincidencia parcial-  * `PATH` - Ruta de acceso al recurso. Coincidencia parcial. ", schema = @Schema()) @Valid @RequestParam(value = "filter", required = false) Map<String, String> filter);

	@Operation(summary = "Obtener definicion de layuot.", description = "Permite obtener las definiciones de disposición de los componenetees visuales de la plataforma VIAL+.", tags = {
			"Recursos" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Layout obtenido satisfactoriamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RouterDTO.class))),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/resources/layout", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<RouterDTO> getLayout();

	@Operation(summary = "Obtener mapeo de módulos.", description = "Permite obtener el mapeo de los imports requeridos para la exposición de los modulos visuales de la plataforma VIAL+.", tags = {
			"Recursos" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Imports obtenidos satisfactoriamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MappingDTO.class))),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/resources/mapping", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<MappingDTO> getMapping();

	@Operation(summary = "Consultar recurso por identificador", description = "Obtiene el detalle de un recurso del sistema", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Recursos" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceDTO.class))),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/resources/{id}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<ResourceDTO> getResource(
			@Parameter(in = ParameterIn.PATH, description = "Identificador de recurso a consultar.", required = true, schema = @Schema()) @PathVariable("id") Long id);

	@Operation(summary = "Registrar recurso", description = "Solicitud de registro de un recurso del sistema.", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Recursos" })
	@ApiResponses(value = { @ApiResponse(responseCode = "201", description = "Recurso registrado correctamente"),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/resources", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> registerResource(
			@Parameter(in = ParameterIn.DEFAULT, description = "Información requerida del recurso.", required = true, schema = @Schema()) @Valid @RequestBody ResourceDTO body);

	@Operation(summary = "Actualizar de información de un recurso", description = "Solicitud de modificación de un recurso.", security = {
			@SecurityRequirement(name = "bearerAuth") }, tags = { "Recursos" })
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Recurso modificado correctamente."),

			@ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
	@RequestMapping(value = "/resources/{id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> updateResource(
			@Parameter(in = ParameterIn.PATH, description = "Identificador de recurso a consultar.", required = true, schema = @Schema()) @PathVariable("id") Long id,
			@Parameter(in = ParameterIn.DEFAULT, description = "Datos a modificar del recurso.", required = true, schema = @Schema()) @Valid @RequestBody ResourceDTO body);

}
